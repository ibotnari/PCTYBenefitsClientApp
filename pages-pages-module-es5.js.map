{"version":3,"sources":["webpack:///node_modules/@ngx-pwa/local-storage/__ivy_ngcc__/fesm2015/ngx-pwa-local-storage.js","webpack:///src/app/pages/dashboard/dashboard.component.ts","webpack:///src/app/pages/dashboard/dashboard.component.html","webpack:///src/app/pages/miscellaneous/not-found/not-found.component.ts","webpack:///src/app/pages/miscellaneous/not-found/not-found.component.html","webpack:///src/app/pages/pages-menu.ts","webpack:///src/app/pages/pages-routing.module.ts","webpack:///src/app/pages/pages.component.ts","webpack:///src/app/pages/pages.module.ts","webpack:///src/app/pages/services/employee-pinner.service.ts"],"names":["JSONValidator","data","schema","type","validateString","validateNumber","validateBoolean","validateArray","validateObject","validateConst","validateEnum","maxLength","undefined","length","minLength","pattern","regularExpression","RegExp","_a","test","Number","isInteger","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","Array","isArray","maxItems","minItems","uniqueItems","dataSet","Set","size","items","validateTuple","value","validate","schemas","i","Object","keys","properties","required","requiredProp","hasOwnProperty","property","includes","ɵfac","JSONValidator_Factory","t","ɵprov","factory","token","providedIn","args","LS_PREFIX","DEFAULT_IDB_DB_NAME","IDB_DB_NAME","DEFAULT_IDB_DB_VERSION","IDB_DB_VERSION","DEFAULT_IDB_STORE_NAME","IDB_STORE_NAME","DEFAULT_IDB_NO_WRAP","IDB_NO_WRAP","IDB_BROKEN_ERROR","IDBBrokenError","arguments","message","Error","SERIALIZATION_ERROR","SerializationError","IndexedDBDatabase","dbName","storeName","dbVersion","noWrap","database","wrapIndex","connect","key","transaction","pipe","transactionData","store","events","request","get","result","dataToStore","put","clear","openKeyCursor","openCursor","success$","toString","error$","listenError","getKey","indexedDB","open","error","createStore","subscribe","next","objectStoreNames","contains","createObjectStore","mode","objectStore","listenTransactionEvents","transactionOrRequest","event","target","complete$","version","count","IndexedDBDatabase_Factory","ctorParameters","decorators","LocalStorageDatabase","prefix","unparsedData","localStorage","getItem","prefixKey","parsedData","JSON","parse","serializedData","dataPrototype","getPrototypeOf","prototype","stringify","setItem","removeItem","subscriber","index","getUnprefixedKey","complete","prefixedKey","substr","LocalStorageDatabase_Factory","MemoryDatabase","memoryStorage","Map","rawData","set","has","MemoryDatabase_Factory","localDatabaseFactory","platformId","LSPrefix","IDBDBName","IDBStoreName","IDBDBVersion","IDBNoWrap","LocalDatabase","LocalDatabase_Factory","useFactory","deps","VALIDATION_ERROR","ValidationError","StorageMap","jsonValidator","notifiers","catchIDBBroken","notify","notifier","asObservable","operationCallback","backingStore","StorageMap_Factory","LocalStorage","storageMap","schemaFinal","LocalStorage_Factory","StorageModule","config","ngModule","providers","provide","useValue","ɵmod","ɵinj","StorageModule_Factory","DashboardComponent","selector","templateUrl","styleUrls","NotFoundComponent","menuService","navigateHome","goToHome","PINNED_EMPLOYEES_MENU_ITEMS","title","expanded","MENU_ITEMS","icon","link","home","group","children","routes","path","component","loadChildren","then","m","EmployeesModule","PagesRoutingModule","forChild","imports","exports","PagesComponent","employeePinService","menu","employeePinAddEvent","_","loadEmployeeMenu","employeePinRemoveEvent","menuItems","getPinnedEmployees","map","item","createMenuItem","hidden","e","firstName","lastName","id","template","PagesModule","declarations","EmployeePinService","storage","STORAGE_KEY","pinnedEmployees","storedPinnedEmployees","employee","isPinned","add","emit","pinnedEmployee","from"],"mappings":"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","file":"pages-pages-module-es5.js","sourcesContent":["import { ɵɵdefineInjectable, Injectable, InjectionToken, ɵɵinject, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { ReplaySubject, fromEvent, race, throwError, of, Observable, asyncScheduler, from } from 'rxjs';\nimport { mergeMap, map, first, mapTo, takeWhile, tap, observeOn, catchError } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nclass JSONValidator {\n    /**\n     * Validate a JSON data against a Jsubset of the JSON Schema standard.\n     * Types are enforced to validate everything: each schema must\n     * @param data JSON data to validate\n     * @param schema Subset of JSON Schema. Must have a `type`.\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n     */\n    validate(data, schema) {\n        switch (schema.type) {\n            case 'string':\n                return this.validateString(data, schema);\n            case 'number':\n            case 'integer':\n                return this.validateNumber(data, schema);\n            case 'boolean':\n                return this.validateBoolean(data, schema);\n            case 'array':\n                return this.validateArray(data, schema);\n            case 'object':\n                return this.validateObject(data, schema);\n        }\n    }\n    /**\n     * Validate a string\n     * @param data Data to validate\n     * @param schema Schema describing the string\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateString(data, schema) {\n        if (typeof data !== 'string') {\n            return false;\n        }\n        if (!this.validateConst(data, schema)) {\n            return false;\n        }\n        if (!this.validateEnum(data, schema)) {\n            return false;\n        }\n        if ((schema.maxLength !== undefined) && (data.length > schema.maxLength)) {\n            return false;\n        }\n        if ((schema.minLength !== undefined) && (data.length < schema.minLength)) {\n            return false;\n        }\n        if (schema.pattern) {\n            let regularExpression = null;\n            try {\n                regularExpression = new RegExp(schema.pattern);\n            }\n            catch (_a) { }\n            if (regularExpression && !regularExpression.test(data)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate a number or an integer\n     * @param data Data to validate\n     * @param schema Schema describing the number or integer\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateNumber(data, schema) {\n        if (typeof data !== 'number') {\n            return false;\n        }\n        if ((schema.type === 'integer') && !Number.isInteger(data)) {\n            return false;\n        }\n        if (!this.validateConst(data, schema)) {\n            return false;\n        }\n        if (!this.validateEnum(data, schema)) {\n            return false;\n        }\n        /* Test is done this way to not divide by 0 */\n        if (schema.multipleOf && !Number.isInteger(data / schema.multipleOf)) {\n            return false;\n        }\n        if ((schema.maximum !== undefined) && (data > schema.maximum)) {\n            return false;\n        }\n        if ((schema.exclusiveMaximum !== undefined) && (data >= schema.exclusiveMaximum)) {\n            return false;\n        }\n        if ((schema.minimum !== undefined) && (data < schema.minimum)) {\n            return false;\n        }\n        if ((schema.exclusiveMinimum !== undefined) && (data <= schema.exclusiveMinimum)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Validate a boolean\n     * @param data Data to validate\n     * @param schema Schema describing the boolean\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateBoolean(data, schema) {\n        if (typeof data !== 'boolean') {\n            return false;\n        }\n        if (!this.validateConst(data, schema)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Validate an array\n     * @param data Data to validate\n     * @param schema Schema describing the array\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateArray(data, schema) {\n        if (!Array.isArray(data)) {\n            return false;\n        }\n        if ((schema.maxItems !== undefined) && (data.length > schema.maxItems)) {\n            return false;\n        }\n        if ((schema.minItems !== undefined) && (data.length < schema.minItems)) {\n            return false;\n        }\n        if (schema.uniqueItems) {\n            /* Create a set to eliminate values with multiple occurences */\n            const dataSet = new Set(data);\n            if (data.length !== dataSet.size) {\n                return false;\n            }\n        }\n        /* Specific test for tuples */\n        if (Array.isArray(schema.items)) {\n            return this.validateTuple(data, schema.items);\n        }\n        /* Validate all the values in array */\n        for (const value of data) {\n            if (!this.validate(value, schema.items)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate a tuple (array with fixed length and multiple types)\n     * @param data Data to validate\n     * @param schemas Schemas describing the tuple\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateTuple(data, schemas) {\n        /* Tuples have a fixed length */\n        if (data.length !== schemas.length) {\n            return false;\n        }\n        for (let i = 0; i < schemas.length; i += 1) {\n            if (!this.validate(data[i], schemas[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate an object\n     * @param data Data to validate\n     * @param schema JSON schema describing the object\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateObject(data, schema) {\n        /* Check the type and if not `null` as `null` also have the type `object` in old browsers */\n        if ((typeof data !== 'object') || (data === null)) {\n            return false;\n        }\n        /* Check if the object doesn't have more properties than expected\n         * Equivalent of `additionalProperties: false`\n         */\n        if (Object.keys(schema.properties).length < Object.keys(data).length) {\n            return false;\n        }\n        /* Validate required properties */\n        if (schema.required) {\n            for (const requiredProp of schema.required) {\n                if (!data.hasOwnProperty(requiredProp)) {\n                    return false;\n                }\n            }\n        }\n        /* Recursively validate all properties */\n        for (const property in schema.properties) {\n            /* Filter to keep only real properties (no internal JS stuff) and check if the data has the property too */\n            if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n                if (!this.validate(data[property], schema.properties[property])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate a constant\n     * @param data Data ta validate\n     * @param schema JSON schema describing the constant\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateConst(data, schema) {\n        if (!schema.const) {\n            return true;\n        }\n        return (data === schema.const);\n    }\n    /**\n     * Validate an enum\n     * @param data Data ta validate\n     * @param schema JSON schema describing the enum\n     * @returns If data is valid: `true`, if it is invalid: `false`\n     */\n    validateEnum(data, schema) {\n        if (!schema.enum) {\n            return true;\n        }\n        /* Cast as the data can be of multiple types, and so TypeScript is lost */\n        return (schema.enum.includes(data));\n    }\n}\nJSONValidator.ɵfac = function JSONValidator_Factory(t) { return new (t || JSONValidator)(); };\nJSONValidator.ɵprov = ɵɵdefineInjectable({ factory: function JSONValidator_Factory() { return new JSONValidator(); }, token: JSONValidator, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JSONValidator, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\n/**\n * Token to provide a prefix to `localStorage` keys.\n */\nconst LS_PREFIX = new InjectionToken('localStoragePrefix', {\n    providedIn: 'root',\n    factory: () => ''\n});\n/**\n * Default name used for `indexedDB` database.\n */\nconst DEFAULT_IDB_DB_NAME = 'ngStorage';\n/**\n * Token to provide `indexedDB` database name.\n */\nconst IDB_DB_NAME = new InjectionToken('localStorageIDBDBName', {\n    providedIn: 'root',\n    factory: () => DEFAULT_IDB_DB_NAME\n});\n/**\n * Default version used for `indexedDB` database.\n */\nconst DEFAULT_IDB_DB_VERSION = 1;\n/**\n * Token to provide `indexedDB` database version.\n * Must be an unsigned **integer**.\n */\nconst IDB_DB_VERSION = new InjectionToken('localStorageIDBDBVersion', {\n    providedIn: 'root',\n    factory: () => DEFAULT_IDB_DB_VERSION\n});\n/**\n * Default name used for `indexedDB` object store.\n */\nconst DEFAULT_IDB_STORE_NAME = 'localStorage';\n/**\n * Token to provide `indexedDB` store name.\n * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.\n */\nconst IDB_STORE_NAME = new InjectionToken('localStorageIDBStoreName', {\n    providedIn: 'root',\n    factory: () => DEFAULT_IDB_STORE_NAME\n});\n/**\n * Default value for interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n */\nconst DEFAULT_IDB_NO_WRAP = true;\n/**\n * Token to allow interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Defaults to `true`. Change to `false` for backward compatiblity in existing applications.\n * **DO NOT CHANGE THIS BEHAVIOR ONCE IN PRODUCTION**, as it would break with existing data.\n */\nconst IDB_NO_WRAP = new InjectionToken('localStorageIDBWrap', {\n    providedIn: 'root',\n    factory: () => DEFAULT_IDB_NO_WRAP\n});\n\n/**\n * Exception message when `indexedDB` is not working\n */\nconst IDB_BROKEN_ERROR = 'indexedDB is not working';\n/**\n * Exception raised when `indexedDB` is not working\n */\nclass IDBBrokenError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = IDB_BROKEN_ERROR;\n    }\n}\n/**\n * Exception message when a value can't be serialized for `localStorage`\n */\nconst SERIALIZATION_ERROR = `The storage is currently localStorage,\nwhere data must be serialized, and the provided data can't be serialized.`;\n/**\n * Exception raised when a value can't be serialized for `localStorage`\n */\nclass SerializationError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = SERIALIZATION_ERROR;\n    }\n}\n\nclass IndexedDBDatabase {\n    /**\n     * Constructor params are provided by Angular (but can also be passed manually in tests)\n     * @param dbName `indexedDB` database name\n     * @param storeName `indexedDB` store name\n     * @param dbVersion `indexedDB` database version\n     * @param noWrap Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility\n     */\n    constructor(dbName = DEFAULT_IDB_DB_NAME, storeName = DEFAULT_IDB_STORE_NAME, dbVersion = DEFAULT_IDB_DB_VERSION, noWrap = DEFAULT_IDB_NO_WRAP) {\n        /**\n         * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection\n         * even after the connection success event happened\n         */\n        this.database = new ReplaySubject(1);\n        /**\n         * Index used when wrapping value. *For backward compatibility only.*\n         */\n        this.wrapIndex = 'value';\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.dbVersion = dbVersion;\n        this.noWrap = noWrap;\n        /* Connect to `indexedDB`, with prefix if provided by the user */\n        this.connect();\n    }\n    /**\n     * Information about `indexedDB` connection. *Only useful for interoperability.*\n     * @returns `indexedDB` database name, store name and database version\n     */\n    get backingStore() {\n        return {\n            database: this.dbName,\n            store: this.storeName,\n            version: this.dbVersion,\n        };\n    }\n    /**\n     * Number of items in our `indexedDB` database and object store\n     */\n    get size() {\n        /* Open a transaction in read-only mode */\n        return this.transaction('readonly').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Request to know the number of items */\n            const request = store.count();\n            /* Return the result */\n            return events.pipe(map(() => request.result));\n        }), \n        /* The observable will complete after the first value */\n        first());\n    }\n    /**\n     * Gets an item value in our `indexedDB` store\n     * @param key The item's key\n     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`\n     */\n    get(key) {\n        /* Open a transaction in read-only mode */\n        return this.transaction('readonly').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Request the value with the key provided by the user */\n            const request = store.get(key);\n            /* Listen events and return the result */\n            return events.pipe(map(() => {\n                if ((request.result !== undefined) && (request.result !== null)) {\n                    /* Prior to v8, the value was wrapped in an `{ value: ...}` object */\n                    if (!this.noWrap && (typeof request.result === 'object') && (this.wrapIndex in request.result) &&\n                        (request.result[this.wrapIndex] !== undefined) && (request.result[this.wrapIndex] !== null)) {\n                        return request.result[this.wrapIndex];\n                    }\n                    else {\n                        /* Cast to the wanted type */\n                        return request.result;\n                    }\n                }\n                /* Return `undefined` if the value is empty */\n                return undefined;\n            }));\n        }), \n        /* The observable will complete after the first value */\n        first());\n    }\n    /**\n     * Sets an item in our `indexedDB` store\n     * @param key The item's key\n     * @param data The item's value\n     * @returns An RxJS `Observable` to wait the end of the operation\n     */\n    set(key, data) {\n        /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */\n        if (data === undefined) {\n            return this.delete(key);\n        }\n        /* Open a transaction in write mode */\n        return this.transaction('readwrite').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Prior to v8, data was wrapped in a `{ value: ... }` object */\n            const dataToStore = this.noWrap ? data : { [this.wrapIndex]: data };\n            /* Add if the item is not existing yet, or update otherwise */\n            store.put(dataToStore, key);\n            /* Listen to events and return `undefined` as no value is expected */\n            return events.pipe(mapTo(undefined));\n        }), \n        /* The observable will complete after the first value */\n        first());\n    }\n    /**\n     * Deletes an item in our `indexedDB` store\n     * @param key The item's key\n     * @returns An RxJS `Observable` to wait the end of the operation\n     */\n    delete(key) {\n        /* Open a transaction in write mode */\n        return this.transaction('readwrite').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Delete the item in store */\n            store.delete(key);\n            /* Listen to events and return `undefined` as no data is expected here */\n            return events.pipe(mapTo(undefined));\n        }), \n        /* The observable will complete after the first value */\n        first());\n    }\n    /**\n     * Deletes all items from our `indexedDB` objet store\n     * @returns An RxJS `Observable` to wait the end of the operation\n     */\n    clear() {\n        /* Open a transaction in write mode */\n        return this.transaction('readwrite').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Delete all items in object store */\n            store.clear();\n            /* Listen to events and return `undefined` as no data is expected here */\n            return events.pipe(mapTo(undefined));\n        }), \n        /* The observable will complete */\n        first());\n    }\n    /**\n     * Get all the keys in our `indexedDB` store\n     * @returns An RxJS `Observable` iterating on each key\n     */\n    keys() {\n        /* Open a transaction in read-only mode */\n        return this.transaction('readonly').pipe(\n        /* `first()` is used as the final operator in other methods to complete the `Observable`\n         * (as it all starts from a `ReplaySubject` which never ends),\n         * but as this method is iterating over multiple values, `first()` **must** be used here */\n        first(), mergeMap((transactionData) => {\n            const { store } = transactionData;\n            /* Open a cursor on the store\n             * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE)\n             * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */\n            const request = ('openKeyCursor' in store) ? store.openKeyCursor() : store.openCursor();\n            /* Listen to success event */\n            const success$ = fromEvent(request, 'success').pipe(\n            /* Stop the `Observable` when the cursor is `null` */\n            takeWhile(() => (request.result !== null)), \n            /* This lib only allows string keys, but user could have added other types of keys from outside\n             * It's OK to cast as the cursor as been tested in the previous operator */\n            map(() => request.result.key.toString()), \n            /* Iterate on the cursor */\n            tap(() => { request.result.continue(); }));\n            /* Listen to error event and if so, throw an error */\n            const error$ = this.listenError(request);\n            /* Choose the first event to occur */\n            return race([success$, error$]);\n        }));\n    }\n    /**\n     * Check if a key exists in our `indexedDB` store\n     * @returns An RxJS `Observable` telling if the key exists or not\n     */\n    has(key) {\n        /* Open a transaction in read-only mode */\n        return this.transaction('readonly').pipe(mergeMap((transactionData) => {\n            const { store, events } = transactionData;\n            /* Check if the key exists in the store\n             * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/ Legacy).\n             * In older browsers, the value is checked instead, but it could lead to an exception\n             * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n             * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69\n             */\n            const request = ('getKey' in store) ? store.getKey(key) : store.get(key);\n            /* Listen to events and return `true` or `false` */\n            return events.pipe(map(() => (request.result !== undefined) ? true : false));\n        }), \n        /* The observable will complete */\n        first());\n    }\n    /**\n     * Connects to `indexedDB` and creates the object store on first time\n     */\n    connect() {\n        let request;\n        /* Connect to `indexedDB`\n         * Will fail in Safari cross-origin iframes\n         * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */\n        try {\n            /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */\n            request = indexedDB.open(this.dbName, this.dbVersion);\n        }\n        catch (_a) {\n            this.database.error(new IDBBrokenError());\n            return;\n        }\n        /* Create store on first connection */\n        this.createStore(request);\n        /* Listen to success and error events */\n        const success$ = fromEvent(request, 'success');\n        const error$ = this.listenError(request);\n        /* Choose the first to occur */\n        race([success$, error$])\n            /* The observable will complete */\n            .pipe(first())\n            .subscribe({\n            next: () => {\n                /* Register the database connection in the `ReplaySubject` for further access */\n                this.database.next(request.result);\n            },\n            error: () => {\n                /* Firefox private mode issue: fallback storage if IndexedDb connection is failing\n                * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n                * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */\n                this.database.error(new IDBBrokenError());\n            },\n        });\n    }\n    /**\n     * Create store on first use of `indexedDB`\n     * @param request `indexedDB` database opening request\n     */\n    createStore(request) {\n        /* Listen to the event fired on first connection */\n        fromEvent(request, 'upgradeneeded')\n            /* The observable will complete */\n            .pipe(first())\n            .subscribe({\n            next: () => {\n                /* Check if the store already exists, to avoid error */\n                if (!request.result.objectStoreNames.contains(this.storeName)) {\n                    /* Create the object store */\n                    request.result.createObjectStore(this.storeName);\n                }\n            }\n        });\n    }\n    /**\n     * Open an `indexedDB` transaction and get our store\n     * @param mode `readonly` or `readwrite`\n     * @returns An `indexedDB` transaction store and events, wrapped in an RxJS `Observable`\n     */\n    transaction(mode) {\n        /* From the `indexedDB` connection, open a transaction and get the store */\n        return this.database\n            .pipe(mergeMap((database) => {\n            let transaction;\n            try {\n                transaction = database.transaction([this.storeName], mode);\n            }\n            catch (error) {\n                /* The store could have been deleted from outside */\n                return throwError(error);\n            }\n            /* Get the store from the transaction */\n            const store = transaction.objectStore(this.storeName);\n            /* Listen transaction `complete` and `error` events */\n            const events = this.listenTransactionEvents(transaction);\n            return of({ store, events });\n        }));\n    }\n    /**\n     * Listen errors on a transaction or request, and throw if trigerred\n     * @param transactionOrRequest `indexedDb` transaction or request to listen\n     * @returns An `Observable` listening to errors\n     */\n    listenError(transactionOrRequest) {\n        return fromEvent(transactionOrRequest, 'error').pipe(\n        /* Throw on error to be able to catch errors in RxJS way.\n         * Here `event.target` must be used, as `transactionOrRequest.error` will be `null`\n         * if we are on the request and the error is only triggered later by the transaction */\n        mergeMap((event) => throwError(event.target.error)));\n    }\n    /**\n     * Listen transaction `complete` and `error` events\n     * @param transaction Transaction to listen\n     * @returns An `Observable` listening to transaction `complete` and `error` events\n     */\n    listenTransactionEvents(transaction) {\n        /* Listen to the `complete` event */\n        const complete$ = fromEvent(transaction, 'complete');\n        /* Listen to the `error` event */\n        const error$ = this.listenError(transaction);\n        /* Choose the first event to occur */\n        return race([complete$, error$]);\n    }\n}\nIndexedDBDatabase.ɵfac = function IndexedDBDatabase_Factory(t) { return new (t || IndexedDBDatabase)(ɵngcc0.ɵɵinject(IDB_DB_NAME), ɵngcc0.ɵɵinject(IDB_STORE_NAME), ɵngcc0.ɵɵinject(IDB_DB_VERSION), ɵngcc0.ɵɵinject(IDB_NO_WRAP)); };\nIndexedDBDatabase.ɵprov = ɵɵdefineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(ɵɵinject(IDB_DB_NAME), ɵɵinject(IDB_STORE_NAME), ɵɵinject(IDB_DB_VERSION), ɵɵinject(IDB_NO_WRAP)); }, token: IndexedDBDatabase, providedIn: \"root\" });\nIndexedDBDatabase.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [IDB_DB_NAME,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [IDB_STORE_NAME,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [IDB_DB_VERSION,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [IDB_NO_WRAP,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IndexedDBDatabase, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [IDB_DB_NAME]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [IDB_STORE_NAME]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [IDB_DB_VERSION]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [IDB_NO_WRAP]\n            }] }]; }, null); })();\n\nclass LocalStorageDatabase {\n    /**\n     * Constructor params are provided by Angular (but can also be passed manually in tests)\n     * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability\n     */\n    constructor(prefix = '') {\n        /* Prefix if asked, or no prefix otherwise */\n        this.prefix = prefix || '';\n    }\n    /**\n     * Number of items in `localStorage`\n     */\n    get size() {\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(localStorage.length);\n    }\n    /**\n     * Gets an item value in `localStorage`\n     * @param key The item's key\n     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n     */\n    get(key) {\n        /* Get raw data */\n        const unparsedData = localStorage.getItem(this.prefixKey(key));\n        let parsedData;\n        /* No need to parse if data is `null` or `undefined` */\n        if ((unparsedData !== undefined) && (unparsedData !== null)) {\n            /* Try to parse */\n            try {\n                parsedData = JSON.parse(unparsedData);\n            }\n            catch (error) {\n                return throwError(error);\n            }\n        }\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(parsedData);\n    }\n    /**\n     * Store an item in `localStorage`\n     * @param key The item's key\n     * @param data The item's value\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    set(key, data) {\n        let serializedData = null;\n        /* Check if data can be serialized */\n        const dataPrototype = Object.getPrototypeOf(data);\n        if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&\n            !((dataPrototype === Object.prototype) || (dataPrototype === null))) {\n            return throwError(new SerializationError());\n        }\n        /* Try to stringify (can fail on circular references) */\n        try {\n            serializedData = JSON.stringify(data);\n        }\n        catch (error) {\n            return throwError(error);\n        }\n        /* Can fail if storage quota is exceeded */\n        try {\n            localStorage.setItem(this.prefixKey(key), serializedData);\n        }\n        catch (error) {\n            return throwError(error);\n        }\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Deletes an item in `localStorage`\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    delete(key) {\n        localStorage.removeItem(this.prefixKey(key));\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Deletes all items in `localStorage`\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    clear() {\n        localStorage.clear();\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Get all keys in `localStorage`\n     * Note the order of the keys may be inconsistent in Firefox\n     * @returns A RxJS `Observable` iterating on keys\n     */\n    keys() {\n        /* Create an `Observable` from keys */\n        return new Observable((subscriber) => {\n            /* Iteretate over all the indexes */\n            for (let index = 0; index < localStorage.length; index += 1) {\n                /* Cast as we are sure in this case the key is not `null` */\n                subscriber.next(this.getUnprefixedKey(index));\n            }\n            subscriber.complete();\n        }).pipe(\n        /* Required to work like other databases which are asynchronous */\n        observeOn(asyncScheduler));\n    }\n    /**\n     * Check if a key exists in `localStorage`\n     * @param key The item's key\n     * @returns A RxJS `Observable` telling if the key exists or not\n     */\n    has(key) {\n        /* Itérate over all indexes in storage */\n        for (let index = 0; index < localStorage.length; index += 1) {\n            if (key === this.getUnprefixedKey(index)) {\n                /* Wrap in a RxJS `Observable` to be consistent with other storages */\n                return of(true);\n            }\n        }\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(false);\n    }\n    /**\n     * Get an unprefixed key\n     * @param index Index of the key\n     * @returns The unprefixed key name if exists, `null` otherwise\n     */\n    getUnprefixedKey(index) {\n        /* Get the key in storage: may have a prefix */\n        const prefixedKey = localStorage.key(index);\n        if (prefixedKey !== null) {\n            /* If no prefix, the key is already good, otherwrite strip the prefix */\n            return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);\n        }\n        return null;\n    }\n    /**\n     * Add the prefix to a key\n     * @param key The key name\n     * @returns The prefixed key name\n     */\n    prefixKey(key) {\n        return `${this.prefix}${key}`;\n    }\n}\nLocalStorageDatabase.ɵfac = function LocalStorageDatabase_Factory(t) { return new (t || LocalStorageDatabase)(ɵngcc0.ɵɵinject(LS_PREFIX)); };\nLocalStorageDatabase.ɵprov = ɵɵdefineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(ɵɵinject(LS_PREFIX)); }, token: LocalStorageDatabase, providedIn: \"root\" });\nLocalStorageDatabase.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [LS_PREFIX,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalStorageDatabase, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [LS_PREFIX]\n            }] }]; }, null); })();\n\nclass MemoryDatabase {\n    constructor() {\n        /**\n         * Memory storage\n         */\n        this.memoryStorage = new Map();\n    }\n    /**\n     * Number of items in memory\n     */\n    get size() {\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(this.memoryStorage.size);\n    }\n    /**\n     * Gets an item value in memory\n     * @param key The item's key\n     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n     */\n    get(key) {\n        const rawData = this.memoryStorage.get(key);\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(rawData);\n    }\n    /**\n     * Sets an item in memory\n     * @param key The item's key\n     * @param data The item's value\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    set(key, data) {\n        this.memoryStorage.set(key, data);\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Deletes an item in memory\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    delete(key) {\n        this.memoryStorage.delete(key);\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Deletes all items in memory\n     * @returns A RxJS `Observable` to wait the end of the operation\n     */\n    clear() {\n        this.memoryStorage.clear();\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(undefined);\n    }\n    /**\n     * Get all keys in memory\n     * @returns A RxJS `Observable` iterating on keys\n     */\n    keys() {\n        /* Create an `Observable` from keys */\n        return from(this.memoryStorage.keys());\n    }\n    /**\n     * Check if a key exists in memory\n     * @param key Key name\n     * @returns a RxJS `Observable` telling if the key exists or not\n     */\n    has(key) {\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(this.memoryStorage.has(key));\n    }\n}\nMemoryDatabase.ɵfac = function MemoryDatabase_Factory(t) { return new (t || MemoryDatabase)(); };\nMemoryDatabase.ɵprov = ɵɵdefineInjectable({ factory: function MemoryDatabase_Factory() { return new MemoryDatabase(); }, token: MemoryDatabase, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MemoryDatabase, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/**\n * Factory to create a storage according to browser support\n * @param platformId Context about the platform (`browser`, `server`...)\n * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain\n * @param IDBDBName `indexedDB` database name\n * @param IDBstoreName `indexedDB` storeName name\n * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/BROWSERS_SUPPORT.md}\n */\nfunction localDatabaseFactory(platformId, LSPrefix, IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap) {\n    /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n     * just trying to check `indexedDB` or `localStorage` variables causes a security exception.\n     * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n     */\n    try {\n        // Do not explicit `window` here, as the global object is not the same in web workers\n        if (isPlatformBrowser(platformId) && (indexedDB !== undefined) && (indexedDB !== null) && ('open' in indexedDB)) {\n            /* Check:\n            * - if we are in a browser context (issue: server-side rendering)\n            * - if `indexedDB` exists (issue: IE9)\n            * - it could exist but be `undefined` or `null` (issue: IE private mode)\n            * - it could exists but not having a working API\n            * Will be the case for:\n            * - IE10+ and all other browsers in normal mode\n            * - Chromium / Safari private mode, but in this case, data will be swiped when the user leaves the app */\n            return new IndexedDBDatabase(IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap);\n        }\n        else if (isPlatformBrowser(platformId)\n            && (localStorage !== undefined) && (localStorage !== null) && ('getItem' in localStorage)) {\n            /* Check:\n            * - if we are in a browser context (issue: server-side rendering)\n            * - if `localStorage` exists (to be sure)\n            * - it could exists but not having a working API\n            * Will be the case for:\n            * - IE9\n            * - Safari cross-origin iframes, detected later in `IndexedDBDatabase.connect()`\n            * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42}\n            * - IE / Firefox private mode, but in this case, data will be swiped when the user leaves the app\n            * For Firefox, can only be detected later in `IndexedDBDatabase.connect()`\n            * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n            */\n            return new LocalStorageDatabase(LSPrefix);\n        }\n    }\n    catch (_a) { }\n    /* Will be the case for:\n     * - In browsers if storage has been fully disabled (via the \"Block all cookies\" option)\n     * - Server-side rendering\n     * - All other non-browser context\n     */\n    return new MemoryDatabase();\n}\nclass LocalDatabase {\n}\nLocalDatabase.ɵfac = function LocalDatabase_Factory(t) { return new (t || LocalDatabase)(); };\nLocalDatabase.ɵprov = ɵɵdefineInjectable({ factory: function LocalDatabase_Factory() { return localDatabaseFactory(ɵɵinject(PLATFORM_ID), ɵɵinject(LS_PREFIX), ɵɵinject(IDB_DB_NAME), ɵɵinject(IDB_STORE_NAME), ɵɵinject(IDB_DB_VERSION), ɵɵinject(IDB_NO_WRAP)); }, token: LocalDatabase, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalDatabase, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n                useFactory: localDatabaseFactory,\n                deps: [\n                    PLATFORM_ID,\n                    LS_PREFIX,\n                    IDB_DB_NAME,\n                    IDB_STORE_NAME,\n                    IDB_DB_VERSION,\n                    IDB_NO_WRAP,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * Exception message when a value is not valid against the JSON schema\n */\nconst VALIDATION_ERROR = `Data stored is not valid against the provided JSON schema.\nCheck your JSON schema, otherwise it means data has been corrupted.`;\n/**\n * Exception raised when a value is not valid against the JSON schema\n */\nclass ValidationError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = VALIDATION_ERROR;\n    }\n}\n\nclass StorageMap {\n    /**\n     * Constructor params are provided by Angular (but can also be passed manually in tests)\n     * @param database Storage to use\n     * @param jsonValidator Validator service\n     * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n     */\n    constructor(database, jsonValidator = new JSONValidator(), LSPrefix = '') {\n        this.database = database;\n        this.jsonValidator = jsonValidator;\n        this.LSPrefix = LSPrefix;\n        this.notifiers = new Map();\n    }\n    /**\n     * **Number of items** in storage, wrapped in an `Observable`.\n     *\n     * @example\n     * this.storageMap.size.subscribe((size) => {\n     *   console.log(size);\n     * });\n     */\n    get size() {\n        return this.database.size\n            /* Catch if `indexedDb` is broken */\n            .pipe(this.catchIDBBroken(() => this.database.size));\n    }\n    /**\n     * Tells you which storage engine is used. *Only useful for interoperability.*\n     * Note that due to some browsers issues in some special contexts\n     * (Firefox private mode and Safari cross-origin iframes),\n     * **this information may be wrong at initialization,**\n     * as the storage could fallback from `indexedDB` to `localStorage`\n     * only after a first read or write operation.\n     * @returns Storage engine used\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'indexedDB') {}\n     */\n    get backingEngine() {\n        if (this.database instanceof IndexedDBDatabase) {\n            return 'indexedDB';\n        }\n        else if (this.database instanceof LocalStorageDatabase) {\n            return 'localStorage';\n        }\n        else if (this.database instanceof MemoryDatabase) {\n            return 'memory';\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    /**\n     * Info about `indexedDB` database. *Only useful for interoperability.*\n     * @returns `indexedDB` database name, store name and database version.\n     * **Values will be empty if the storage is not `indexedDB`,**\n     * **so it should be used after an engine check**.\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'indexedDB') {\n     *   const { database, store, version } = this.storageMap.backingStore;\n     * }\n     */\n    get backingStore() {\n        return (this.database instanceof IndexedDBDatabase) ?\n            this.database.backingStore :\n            { database: '', store: '', version: 0 };\n    }\n    /**\n     * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n     * @returns `localStorage` prefix.\n     * **Values will be empty if the storage is not `localStorage`,**\n     * **so it should be used after an engine check**.\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'localStorage') {\n     *   const { prefix } = this.storageMap.fallbackBackingStore;\n     * }\n     */\n    get fallbackBackingStore() {\n        return (this.database instanceof LocalStorageDatabase) ?\n            { prefix: this.database.prefix } :\n            { prefix: '' };\n    }\n    get(key, schema) {\n        /* Get the data in storage */\n        return this.database.get(key).pipe(\n        /* Check if `indexedDb` is broken */\n        this.catchIDBBroken(() => this.database.get(key)), mergeMap((data) => {\n            /* No need to validate if the data is empty */\n            if ((data === undefined) || (data === null)) {\n                return of(undefined);\n            }\n            else if (schema) {\n                /* Validate data against a JSON schema if provided */\n                if (!this.jsonValidator.validate(data, schema)) {\n                    return throwError(new ValidationError());\n                }\n                /* Data have been checked, so it's OK to cast */\n                return of(data);\n            }\n            /* Cast to unknown as the data wasn't checked */\n            return of(data);\n        }));\n    }\n    /**\n     * Set an item in storage.\n     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n     * @param key The item's key\n     * @param data The item's value\n     * @param schema Optional JSON schema to validate the data\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.set('key', 'value').subscribe(() => {});\n     */\n    set(key, data, schema) {\n        /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,\n         * so removing item instead for all storages to have a consistent API */\n        if ((data === undefined) || (data === null)) {\n            return this.delete(key);\n        }\n        /* Validate data against a JSON schema if provided */\n        if (schema && !this.jsonValidator.validate(data, schema)) {\n            return throwError(new ValidationError());\n        }\n        return this.database.set(key, data).pipe(\n        /* Catch if `indexedDb` is broken */\n        this.catchIDBBroken(() => this.database.set(key, data)), \n        /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n        tap(() => { this.notify(key, data); }));\n    }\n    /**\n     * Delete an item in storage\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.delete('key').subscribe(() => {});\n     */\n    delete(key) {\n        return this.database.delete(key).pipe(\n        /* Catch if `indexedDb` is broken */\n        this.catchIDBBroken(() => this.database.delete(key)), \n        /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n        tap(() => { this.notify(key, undefined); }));\n    }\n    /**\n     * Delete all items in storage\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.clear().subscribe(() => {});\n     */\n    clear() {\n        return this.database.clear().pipe(\n        /* Catch if `indexedDb` is broken */\n        this.catchIDBBroken(() => this.database.clear()), \n        /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n        tap(() => {\n            for (const key of this.notifiers.keys()) {\n                this.notify(key, undefined);\n            }\n        }));\n    }\n    /**\n     * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n     * * if there is no key, the `next` callback will not be invoked,\n     * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n     * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n     * @returns A list of the keys wrapped in a RxJS `Observable`\n     *\n     * @example\n     * this.storageMap.keys().subscribe({\n     *   next: (key) => { console.log(key); },\n     *   complete: () => { console.log('Done'); },\n     * });\n     */\n    keys() {\n        return this.database.keys()\n            /* Catch if `indexedDb` is broken */\n            .pipe(this.catchIDBBroken(() => this.database.keys()));\n    }\n    /**\n     * Tells if a key exists in storage\n     * @returns A RxJS `Observable` telling if the key exists\n     *\n     * @example\n     * this.storageMap.has('key').subscribe((hasKey) => {\n     *   if (hasKey) {}\n     * });\n     */\n    has(key) {\n        return this.database.has(key)\n            /* Catch if `indexedDb` is broken */\n            .pipe(this.catchIDBBroken(() => this.database.has(key)));\n    }\n    watch(key, schema) {\n        /* Check if there is already a notifier and cast according to schema */\n        let notifier = this.notifiers.get(key);\n        if (!notifier) {\n            /* Create a notifier and cast according to schema */\n            notifier = new ReplaySubject(1);\n            /* Memorize the notifier */\n            this.notifiers.set(key, notifier);\n            /* Get the current item value */\n            this.get(key, schema).subscribe({\n                next: (result) => notifier.next(result),\n                error: (error) => notifier.error(error),\n            });\n        }\n        /* Only the public API of the `Observable` should be returned */\n        return notifier.asObservable();\n    }\n    /**\n     * Notify when a value changes\n     * @param key The item's key\n     * @param data The new value\n     */\n    notify(key, value) {\n        const notifier = this.notifiers.get(key);\n        if (notifier) {\n            notifier.next(value);\n        }\n    }\n    /**\n     * RxJS operator to catch if `indexedDB` is broken\n     * @param operationCallback Callback with the operation to redo\n     */\n    catchIDBBroken(operationCallback) {\n        return catchError((error) => {\n            /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */\n            if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {\n                /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n                 * just trying to check `localStorage` variable causes a security exception.\n                 * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n                 */\n                try {\n                    if ('getItem' in localStorage) {\n                        /* Fallback to `localStorage` if available */\n                        this.database = new LocalStorageDatabase(this.LSPrefix);\n                    }\n                    else {\n                        /* Fallback to memory storage otherwise */\n                        this.database = new MemoryDatabase();\n                    }\n                }\n                catch (_a) {\n                    /* Fallback to memory storage otherwise */\n                    this.database = new MemoryDatabase();\n                }\n                /* Redo the operation */\n                return operationCallback();\n            }\n            else {\n                /* Otherwise, rethrow the error */\n                return throwError(error);\n            }\n        });\n    }\n}\nStorageMap.ɵfac = function StorageMap_Factory(t) { return new (t || StorageMap)(ɵngcc0.ɵɵinject(LocalDatabase), ɵngcc0.ɵɵinject(JSONValidator), ɵngcc0.ɵɵinject(LS_PREFIX)); };\nStorageMap.ɵprov = ɵɵdefineInjectable({ factory: function StorageMap_Factory() { return new StorageMap(ɵɵinject(LocalDatabase), ɵɵinject(JSONValidator), ɵɵinject(LS_PREFIX)); }, token: StorageMap, providedIn: \"root\" });\nStorageMap.ctorParameters = () => [\n    { type: LocalDatabase },\n    { type: JSONValidator },\n    { type: undefined, decorators: [{ type: Inject, args: [LS_PREFIX,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StorageMap, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: LocalDatabase }, { type: JSONValidator }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [LS_PREFIX]\n            }] }]; }, null); })();\n\nclass LocalStorage {\n    /* Use the `StorageMap` service to avoid code duplication */\n    constructor(storageMap) {\n        this.storageMap = storageMap;\n    }\n    /**\n     * Number of items in storage wrapped in an `Observable`\n     *\n     * @example\n     * this.localStorage.length.subscribe((length) => {\n     *   console.log(length);\n     * });\n     */\n    get length() {\n        return this.storageMap.size;\n    }\n    getItem(key, schema) {\n        if (schema) {\n            /* Backward compatibility with version <= 7 */\n            const schemaFinal = ('schema' in schema) ? schema.schema : schema;\n            return this.storageMap.get(key, schemaFinal).pipe(\n            /* Transform `undefined` into `null` to align with `localStorage` API */\n            map((value) => (value !== undefined) ? value : null));\n        }\n        else {\n            return this.storageMap.get(key).pipe(\n            /* Transform `undefined` into `null` to align with `localStorage` API */\n            map((value) => (value !== undefined) ? value : null));\n        }\n    }\n    /**\n     * Set an item in storage.\n     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n     * @param key The item's key\n     * @param data The item's value\n     * @param schema Optional JSON schema to validate the data\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.set('key', 'value').subscribe(() => {});\n     */\n    setItem(key, data, schema) {\n        return this.storageMap.set(key, data, schema).pipe(\n        /* Transform `undefined` into `true` for backward compatibility with v7 */\n        mapTo(true));\n    }\n    /**\n     * Delete an item in storage\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.delete('key').subscribe(() => {});\n     */\n    removeItem(key) {\n        return this.storageMap.delete(key).pipe(\n        /* Transform `undefined` into `true` for backward compatibility with v7 */\n        mapTo(true));\n    }\n    /**\n     * Delete all items in storage\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.clear().subscribe(() => {});\n     */\n    clear() {\n        return this.storageMap.clear().pipe(\n        /* Transform `undefined` into `true` for backward compatibility with v7 */\n        mapTo(true));\n    }\n}\nLocalStorage.ɵfac = function LocalStorage_Factory(t) { return new (t || LocalStorage)(ɵngcc0.ɵɵinject(StorageMap)); };\nLocalStorage.ɵprov = ɵɵdefineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(ɵɵinject(StorageMap)); }, token: LocalStorage, providedIn: \"root\" });\nLocalStorage.ctorParameters = () => [\n    { type: StorageMap }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalStorage, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: StorageMap }]; }, null); })();\n\n/**\n * This module does not contain anything, it's only useful to provide options via `.forRoot()`.\n */\nclass StorageModule {\n    /**\n     * Only useful to provide options, otherwise it does nothing.\n     * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**\n     *\n     * @example\n     * NgModule({\n     *   imports: [StorageModule.forRoot({\n     *     LSPrefix: 'custom_',\n     *   })]\n     * })\n     * export class AppModule\n     */\n    static forRoot(config) {\n        return {\n            ngModule: StorageModule,\n            providers: [\n                config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],\n                config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],\n                config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],\n                config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],\n                (config.IDBNoWrap === false) ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],\n            ],\n        };\n    }\n}\nStorageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StorageModule });\nStorageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StorageModule_Factory(t) { return new (t || StorageModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StorageModule, [{\n        type: NgModule\n    }], null, null); })();\n\n/*\n * Public API Surface of local-storage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { JSONValidator, LocalDatabase, LocalStorage, SERIALIZATION_ERROR, SerializationError, StorageMap, StorageModule, VALIDATION_ERROR, ValidationError, localDatabaseFactory as ɵa, LS_PREFIX as ɵb, IDB_DB_NAME as ɵc, IDB_DB_VERSION as ɵd, IDB_STORE_NAME as ɵe, IDB_NO_WRAP as ɵf };\n\n//# sourceMappingURL=ngx-pwa-local-storage.js.map","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nb-card>\n  <nb-card-header>\n    Dashboard Components\n  </nb-card-header>\n\n  <nb-card-body>\n    <nb-card>\n      <nb-card-header>\n        Card 1\n      </nb-card-header>\n\n      <nb-card-body>\n        ........................\n      </nb-card-body>\n    </nb-card>\n    <nb-card>\n      <nb-card-header>\n        Card 2\n      </nb-card-header>\n\n      <nb-card-body>\n        ........................\n      </nb-card-body>\n    </nb-card>\n  </nb-card-body>\n</nb-card>\n","import { NbMenuService } from '@nebular/theme';\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngx-not-found',\n  styleUrls: ['./not-found.component.scss'],\n  templateUrl: './not-found.component.html',\n})\nexport class NotFoundComponent {\n\n  constructor(private menuService: NbMenuService) {\n  }\n\n  goToHome() {\n    this.menuService.navigateHome();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card>\n      <nb-card-body>\n        <div class=\"flex-centered col-xl-4 col-lg-6 col-md-8 col-sm-12\">\n          <h2 class=\"title\">404 Page Not Found</h2>\n          <small class=\"sub-title\">The page you were looking for doesn't exist</small>\n          <button nbButton matRipple fullWidth (click)=\"goToHome()\" type=\"button\" class=\"home-button\">\n            Take me home\n          </button>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { NbMenuItem } from '@nebular/theme';\n\nexport let PINNED_EMPLOYEES_MENU_ITEMS: NbMenuItem = {\n  title: 'PINNED',\n  expanded: true,\n};\nexport const MENU_ITEMS: NbMenuItem[] = [\n  {\n    title: 'Dashboard',\n    icon: 'home-outline',\n    link: '/pages/dashboard',\n    home: true,\n  },\n  {\n    title: 'ADMIN',\n    group: true,\n  },\n  {\n    title: 'Employees',\n    icon: 'people-outline',\n    link: '/pages/employees',\n    home: true,\n    children: null,\n  },\n  {\n    title: 'Benefits',\n    icon: 'award-outline',\n    link: '/pages/benefits',\n    home: true,\n  },\n  {\n    title: 'Discounts',\n    icon: 'gift-outline',\n    link: '/pages/discounts',\n    home: true,\n  },\n  PINNED_EMPLOYEES_MENU_ITEMS,\n];\n\n","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { PagesComponent } from './pages.component';\nimport { EmployeesComponent } from './employees/employees.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { NotFoundComponent } from './miscellaneous/not-found/not-found.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PagesComponent,\n  children: [\n    {\n      path: '',\n      loadChildren: () => import('./employees/employees.module')\n        .then(m => m.EmployeesModule),\n    },\n    {\n      path: 'dashboard',\n      component: DashboardComponent,\n    },\n    {\n      path: 'employees',\n      loadChildren: () => import('./employees/employees.module')\n        .then(m => m.EmployeesModule),\n    },\n    {\n      path: '**',\n      component: NotFoundComponent,\n    },\n  ],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PagesRoutingModule {\n}\n","import { Component, OnInit } from '@angular/core';\nimport { EmployeePinService } from './services/employee-pinner.service';\nimport { Client, Employee } from \"@api/api\";\nimport { MENU_ITEMS, PINNED_EMPLOYEES_MENU_ITEMS } from './pages-menu';\nimport { NbMenuItem } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-pages',\n  styleUrls: ['pages.component.scss'],\n  template: `\n    <ngx-one-column-layout>\n      <nb-menu [items]=\"menu\"></nb-menu>\n      <router-outlet></router-outlet>\n    </ngx-one-column-layout>\n  `,\n})\nexport class PagesComponent implements OnInit {\n  menu = MENU_ITEMS;\n  constructor(private employeePinService: EmployeePinService) {\n    this.employeePinService.employeePinAddEvent.subscribe({\n      next: (_) => {\n        this.loadEmployeeMenu();\n      },\n    });\n    this.employeePinService.employeePinRemoveEvent.subscribe({\n      next: (_) => {\n        this.loadEmployeeMenu();\n      },\n    });\n  }\n  ngOnInit(): void {\n    this.loadEmployeeMenu();\n  }\n  loadEmployeeMenu() {\n    let menuItems = this.employeePinService.getPinnedEmployees().map(item => this.createMenuItem(item));\n    if (menuItems.length === 0) {\n      menuItems = null;\n    }\n    PINNED_EMPLOYEES_MENU_ITEMS.hidden = (menuItems == null);\n    PINNED_EMPLOYEES_MENU_ITEMS.children = menuItems;\n    this.menu = MENU_ITEMS;\n  }\n  createMenuItem(e: Employee) {\n    return {\n      title: e.firstName + ' ' + e.lastName,\n      icon: 'person-outline',\n      link: '/pages/employees/employee/' + e.id,\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NbMenuModule } from '@nebular/theme';\n\nimport { ThemeModule } from '../@theme/theme.module';\nimport { PagesComponent } from './pages.component';\nimport { PagesRoutingModule } from './pages-routing.module';\nimport { NotFoundComponent } from './miscellaneous/not-found/not-found.component';\n\nimport { NbCardModule, NbIconModule, NbInputModule, NbTreeGridModule, NbButtonModule } from '@nebular/theme';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { EmployeePinService } from \"./services/employee-pinner.service\";\n\n@NgModule({\n  imports: [\n    PagesRoutingModule,\n    ThemeModule,\n    NbMenuModule,\n    NbCardModule,\n    NbIconModule,\n    NbInputModule,\n    NbButtonModule,\n    NbTreeGridModule,\n    FormsModule,\n  ],\n  declarations: [\n    PagesComponent, NotFoundComponent, DashboardComponent,\n  ],\n  providers: [\n    EmployeePinService,\n  ],\n})\nexport class PagesModule {\n}\n","import { Injectable, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Employee } from '@api/api';\nimport { StorageMap } from '@ngx-pwa/local-storage';\n\n@Injectable()\nexport class EmployeePinService implements OnInit, OnDestroy {\n  private STORAGE_KEY: string = 'EmployeePinService:pinnedEmployees';\n  private pinnedEmployees: Set<Employee> = new Set<Employee>();\n  employeePinAddEvent: EventEmitter<Employee> = new EventEmitter<Employee>();\n  employeePinRemoveEvent: EventEmitter<Employee> = new EventEmitter<Employee>();\n\n  constructor(private storage: StorageMap) {\n    this.storage.get(this.STORAGE_KEY).subscribe((storedPinnedEmployees: Set<Employee>) => {\n      if (!(storedPinnedEmployees === undefined)) {\n        this.pinnedEmployees = storedPinnedEmployees;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n  pinEmployee(employee: Employee) {\n    if (!this.isPinned(employee)) {\n      this.pinnedEmployees.add(employee);\n    }\n    this.employeePinAddEvent.emit(employee);\n  }\n  unpinEmployee(employee: Employee) {\n    for (const pinnedEmployee of this.pinnedEmployees) {\n      if (pinnedEmployee.id === employee.id) {\n        this.pinnedEmployees.delete(pinnedEmployee);\n        break;\n      }\n    }\n    // this.pinnedEmployees.delete(employee);\n    this.employeePinRemoveEvent.emit(employee);\n  }\n  getPinnedEmployees() {\n    return Array.from(this.pinnedEmployees.keys());\n  }\n  isPinned(employee: Employee) {\n    for (const pinnedEmployee of this.pinnedEmployees) {\n      if (pinnedEmployee.id === employee.id) {\n        return true;\n      }\n    }\n    return false;\n    //return this.pinnedEmployees.has(employee);\n  }\n  ngOnDestroy() {\n    this.storage.set(this.STORAGE_KEY, this.pinnedEmployees);\n  }\n}\n"]}